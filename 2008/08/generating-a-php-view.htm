@title Generating a PHP View
@draft

<h2>Creating PHP Views</h2>
In the Zend Framework (a recent and high-quality framework for PHP 5), a view is a way of specifying how the data associated to the underlying data model should be represented, in terms of HTML code. An example of view file would be the following:
<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">xml version</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">"1.0"</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> encoding</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">"utf-8"</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span> 
<span style="color: #000084;">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" </span> 
<span style="color: #000084;">  "</span><span style="color: #3f3fbf;">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</span><span style="color: #000084;">"&gt;</span> <span style="color: #7f0055;">
&lt;</span><span style="color: #000084; font-weight: bold;">html</span><span style="color: #7f0055;">&gt;</span> 
  <span style="color: #7f0055;">&lt;</span><span style="color: #000084; font-weight: bold;">head</span><span style="color: #7f0055;">&gt;</span> 
    <span style="color: #7f0055;">&lt;</span><span style="color: #000084; font-weight: bold;">title</span><span style="color: #7f0055;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">i18n</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'website title'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span><span style="color: #7f0055;">&lt;/</span><span style="color: #000084; font-weight: bold;">title</span><span style="color: #7f0055;">&gt;</span>
     <span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">foreach</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">meta</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">as</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$equiv</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$value</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">{</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span>
 <span style="background: #ffffff none repeat scroll 0% 50%; color: #000000;">      </span><span style="background: #ffffff none repeat scroll 0% 50%; color: #7f0055;">&lt;</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #000084; font-weight: bold;">meta</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffff none repeat scroll 0% 50%; color: #000000;">http-equiv=</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #0000ff;">"</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$equiv</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #0000ff;">"</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffff none repeat scroll 0% 50%; color: #000000;">value=</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #0000ff;">"</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$value</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #0000ff;">"</span><span style="background: #ffffff none repeat scroll 0% 50%; color: #7f0055;">/&gt;</span> 
<span style="background: #ffffff none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">}</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span> 
  <span style="color: #7f0055;">&lt;/</span><span style="color: #000084; font-weight: bold;">head</span><span style="color: #7f0055;">&gt;</span> 
  <span style="color: #7f0055;">&lt;</span><span style="color: #000084; font-weight: bold;">body</span><span style="color: #7f0055;">&gt;</span> 
    <span style="color: #7f0055;">&lt;</span><span style="color: #000084; font-weight: bold;">div</span> class=<span style="color: #0000ff;">"navig"</span><span style="color: #7f0055;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">display</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">menu</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span><span style="color: #7f0055;">&lt;/</span><span style="color: #000084; font-weight: bold;">div</span><span style="color: #7f0055;">&gt;</span> 
    <span style="color: #7f0055;">&lt;</span><span style="color: #000084; font-weight: bold;">div</span> class=<span style="color: #0000ff;">"content"</span><span style="color: #7f0055;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">display</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">content</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span><span style="color: #7f0055;">&lt;/</span><span style="color: #000084; font-weight: bold;">div</span><span style="color: #7f0055;">&gt;</span> 
    <span style="color: #7f0055;">&lt;</span><span style="color: #000084; font-weight: bold;">div</span> class=<span style="color: #0000ff;">"footer"</span><span style="color: #7f0055;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">&lt;?</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">display</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">footer</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #7f0055;">?&gt;</span><span style="color: #7f0055;">&lt;/</span><span style="color: #000084; font-weight: bold;">div</span><span style="color: #7f0055;">&gt;</span> 
  <span style="color: #7f0055;">&lt;/</span><span style="color: #000084; font-weight: bold;">body</span><span style="color: #7f0055;">&gt;</span>
<span style="color: #7f0055;">&lt;/</span><span style="color: #000084; font-weight: bold;">html</span><span style="color: #7f0055;">&gt;</span></pre>
</blockquote>
<p style="background: #ffffff none repeat scroll 0% 50%; color: #000000;">I won't go into the details of explaining why this is a good idea (that is a subject for a Dynamic Wednesdays article, after all), but the overall idea is that it separates the display information (the HTML layout) from the data itself (the various member variables of the <span style="font-family: courier new,courier; color: #999999;">$this</span> object, meaning that several layouts can be used for the same object and present things differently.</p>
<p style="background: #ffffff none repeat scroll 0% 50%; color: #000000;">Why, however, does this belong in Functional Tuesdays? What isn't obvious above is that this view was (aside for the beautification of adding colors, line breaks and indentation) generated by a piece of Objective Caml code, illustrated below:</p>

<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="color: #000084; font-weight: bold;">open</span> Html 
<span style="color: #000084; font-weight: bold;">let</span> doc = document 
  ~head:[ 
    title (i18n <span style="color: #0000ff;">"website title"</span>); 
    foreach <span style="color: #0000ff;">"$this-&gt;meta"</span> <span style="color: #0000ff;">"$equiv"</span> <span style="color: #0000ff;">"$value"</span> [ meta (var <span style="color: #0000ff;">"$equiv"</span>) (var <span style="color: #0000ff;">"$value"</span>) ]] 
  ~body:[ 
    div ~a:[<span style="color: #0000ff;">"class"</span>, <span style="color: #0000ff;">"navig"</span>] [ show <span style="color: #0000ff;">"$this-&gt;menu"</span> ]; 
    div ~a:[<span style="color: #0000ff;">"class"</span>, <span style="color: #0000ff;">"content"</span>] [ show <span style="color: #0000ff;">"$this-&gt;content"</span> ]; 
    div ~a:[<span style="color: #0000ff;">"class"</span>, <span style="color: #0000ff;">"footer"</span>] [ show <span style="color: #0000ff;">"$this-&gt;footer"</span> ]]</pre>
</blockquote>
<h2>An HTML generator generator</h2>
The underlying idea is very simple: one uses the Html module to write a description of an HTML document, which may include inline PHP code such as that used by a view. Then, the program is compiled and run, and outputs the described document, which may be uploaded to an appropriate PHP web server.

What is the point?
<ul>
	<li>Elementary safety: unlike PHP, the Objective Caml is statically compiled. This means that a lot of verifications (such as checking for existing functions and variables) can be done automatically to detect such errors. By contrast, one would have to test all the possible paths in a view template to determine that no error happens.</li>
	<li>Additional verifications: although those are not readily done by the OCaml type system, it's possible to perform static checks on the generated code. This includes generated XHTML code validation (examining the generated XHTML tree against a provided DTD), automatic string literal escaping, and even some analysis of the inline PHP code.</li>
	<li>Reflection: it's possible to extract a simplified tree that displays all the arguments that were provided to <span style="font-family: courier new,courier; color: #999999;">show</span>, <span style="font-family: courier new,courier; color: #999999;">"class"</span> or <span style="font-family: courier new,courier; color: #999999;">i18n</span>, allowing the automatic construction of a piece of documentation (required $this fields), CSS wishlist (used classes) and translation tables (used internationalization labels).</li>
	<li>Factoring: since OCaml has a much more expressive set of semantics than a typical view template, it becomes easier to define frequently recurring subexpressions (such as a mandatory wrapper around a block) into a simple function.</li>
	<li>Automatic generation: if a compiler is using PHP as a target language, then this module can be used as a generator.</li>
</ul>
<h2>Implementation fundamentals</h2>
How is this implemented? The simplest way is simply to have functions return a string representing the HTML they generate. Later on, this return type could change to a product type containing both the generated string and various other information for extraction of verification purposes. The fundamental functions used here are:
<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="color: #000084; font-weight: bold;">let</span> flatten xl = concat <span style="color: #0000ff;">""</span> xl 
<span style="color: #000084; font-weight: bold;">let</span> attrs l    = flatten (map (<span style="color: #000084; font-weight: bold;">fun</span> (n,v) -&gt; <span style="color: #0000ff;">" "</span>^n^<span style="color: #0000ff;">"=</span><span style="color: #0000ff;">\"</span><span style="color: #0000ff;">"</span>^v^<span style="color: #0000ff;">"</span><span style="color: #0000ff;">\"</span><span style="color: #0000ff;">"</span>) l) 

<span style="color: #000084; font-weight: bold;">let</span> tag t a i  = sprintf <span style="color: #0000ff;">"&lt;</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">&gt;</span><span style="color: #0000ff;">\n</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">\n</span><span style="color: #0000ff;">&lt;/</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">&gt;</span><span style="color: #0000ff;">\n</span><span style="color: #0000ff;">"</span> t (attrs a) (flatten i) t 
<span style="color: #000084; font-weight: bold;">let</span> ctag t a   = sprintf <span style="color: #0000ff;">"&lt;</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">/&gt;</span><span style="color: #0000ff;">\n</span><span style="color: #0000ff;">"</span> t (attrs a) 
<span style="color: #000084; font-weight: bold;">let</span> ptag c     = sprintf <span style="color: #0000ff;">"&lt;?</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">?&gt;</span><span style="color: #0000ff;">\n</span><span style="color: #0000ff;">"</span> c</pre>
</blockquote>
These functions allow the creation of well-formed tags. Since one wishes to allow the usual "a tag contains a list of tags" approach frequently in XML, a good idea is to use a flattening function to turn a list of strings into a single string, and consider the contents of a tag to be a list of strings. Attributes are handled as name/value pairs and accordingly printed out where applicable.

Once these functions are provided, it's easy to write helpers for elementary XHTML tags:
<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="color: #000084; font-weight: bold;">let</span> div        ?(a = []) x = tag <span style="color: #0000ff;">"div"</span> a x 
<span style="color: #000084; font-weight: bold;">let</span> ul         ?(a = []) x = tag <span style="color: #0000ff;">"ul"</span> a x 
<span style="color: #000084; font-weight: bold;">let</span> ol         ?(a = []) x = tag <span style="color: #0000ff;">"ol"</span> a x 
<span style="color: #000084; font-weight: bold;">let</span> span       ?(a = []) x = tag <span style="color: #0000ff;">"span"</span> a x 
<span style="color: #000084; font-weight: bold;">let</span> li         ?(a = []) x = tag <span style="color: #0000ff;">"li"</span> a x 
<span style="color: #000084; font-weight: bold;">let</span> p          ?(a = []) x = tag <span style="color: #0000ff;">"p"</span> a x 
<span style="color: #000084; font-weight: bold;">let</span> blockquote ?(a = []) x = tag <span style="color: #0000ff;">"blockquote"</span> a x 
<span style="color: #000084; font-weight: bold;">let</span> a          ?(a = []) x = tag <span style="color: #0000ff;">"a"</span> a x 

<span style="color: #000084; font-weight: bold;">let</span> title x  =  tag <span style="color: #0000ff;">"title"</span> [] [x] 
<span style="color: #000084; font-weight: bold;">let</span> meta e c = ctag <span style="color: #0000ff;">"meta"</span> [<span style="color: #0000ff;">"http-equiv"</span>,e; <span style="color: #0000ff;">"content"</span>,c] 
<span style="color: #000084; font-weight: bold;">let</span> i18n s   = ptag (<span style="color: #0000ff;">"=i18n('"</span>^s^<span style="color: #0000ff;">"')"</span>)</pre>
</blockquote>
Here, optional arguments are used to provide attribute lists when necessary, without forcing them to be used if not necessary. The same can be done for the classic PHP control statements:
<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="color: #000084; font-weight: bold;">let</span> var e = ptag (<span style="color: #0000ff;">"="</span>^e) 
<span style="color: #000084; font-weight: bold;">let</span> run e = ptag (e^<span style="color: #0000ff;">";"</span>) 
<span style="color: #000084; font-weight: bold;">let</span> show o = ptag (<span style="color: #0000ff;">"display("</span>^o^<span style="color: #0000ff;">");"</span>) 
<span style="color: #000084; font-weight: bold;">let</span> ifthen c i = ptag (<span style="color: #0000ff;">"if("</span>^c^<span style="color: #0000ff;">"){"</span>) ^ flatten i ^ ptag <span style="color: #0000ff;">"}"</span>  
<span style="color: #000084; font-weight: bold;">let</span> ifelse c i e = ptag (<span style="color: #0000ff;">"if("</span>^c^<span style="color: #0000ff;">"){"</span>) ^ flatten i ^ ptag <span style="color: #0000ff;">"}else{"</span> ^ flatten e ^ ptag <span style="color: #0000ff;">"}"</span> 
<span style="color: #000084; font-weight: bold;">let</span> foreach s k v e = 
  ptag (sprintf <span style="color: #0000ff;">"foreach(</span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;"> as </span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;"> =&gt; </span><span style="color: #0000ff;">%s</span><span style="color: #0000ff;">){"</span> s k v) ^ flatten e ^ ptag <span style="color: #0000ff;">"}"</span></pre>
</blockquote>
For these two code sets, OCaml will check the syntax of the generator program, which will implicitly test the syntax of the generated program for validity (as far as brace and tag balancing are involved). Of course, variable existence or initialization issues are not necessarily solved (this will be done in future situations).