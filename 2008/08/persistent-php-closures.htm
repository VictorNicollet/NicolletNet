@title Persistent PHP Closures
@date 2008-08-19
@tags dynamic php sql
@draft

As a sequel to the previous installment of Dynamic Wednesdays, this article considers the next step in closure manipulation in PHP: persistence. Persistence is the process of preserving a part of program state from one execution to another. In the execution model of PHP, scripts are executed independently (and concurrently) and their working memory is flushed from memory when they end. The only preserved data is that which is sent back to the HTTP client, and that which is saved in the database.

This makes several typical design patterns quite impractical for any usage that extends beyond a single HTTP request: for instance, an API designer may wish the users of the API to be notified of certain events (for instance, the modification of a piece of data). In a typical non-transactional application, the user modules would register themselves with the API by use of the <a href="http://www.dofactory.com/Patterns/PatternObserver.aspx">Observer </a>design pattern (or, in more functional terms, a callback) which would remain stored in the API until the application shuts down, and the observer would be notified of the relevant events. This kind of behavior is, in terms of functionality, perfectly supported by PHP.

However, for this to work, every HTTP request must execute in a completely initialized environment. This requires the server to create a new instance of every core object, then load and initialize all objects provided by the third party users (thereby setting up the aggregation links required by the Observer design pattern through registration with the core objects), and finally run the HTTP request which, most of the time, will not trigger the observer at all. In short, using these techniques in PHP requires massive and mostly useless initialization times that would be best done without.

Partial workarounds do exist: after all, the only requirement to avoid initialization costs is to persist the inter-object relationships in the database. For instance, if a certain user wants to be notified when a certain product is back in stock, his user identifier would be associated with the product identifier in a "waiting for stock" table in a relational database. Observing that a user was associated to the product, the server would then load the user-related code, seek the user by its identifier, and proceed to send the notification. This partial solution, however, is incomplete, since it does not support the Open-Closed principle. Since neither the source code to be loaded (user-related, for instance) nor the relational database table allow for polymorphism, a third party developer cannot extend the product notification system to notify something other than a user.
<h2>Using a database</h2>
The above observations lead to a simple conclusion: to achieve robust persistence of closures, it is necessary to allow polymorphic behavior in terms of source file to be added, and in terms of code to be executed. This implies that the database will have to store both a list of source files to be loaded from disk when the persisted closure is called, and a description of what code should be called. This means either providing a single function name, or a piece of PHP code accompanied by a serialized list of the closure contents.

Despite the obvious danger of storing executable PHP code directly in a database, I will suggest going with that option as a preliminary step, possibly using a specific user for modifying closures, and giving all other users only the right to <span style="font-family: courier new,courier; color: #999999;">SELECT </span>and <span style="font-family: courier new,courier; color: #999999;">DELETE </span>from the closures table. SQL pseudocode for the database would be as follows:
<blockquote>
<pre>CREATE TABLE `closures` (
    `id` INT NOT NULL AUTO_INCREMENT, 
    `exec` TEXT NOT NULL, -- PHP code to be run. 
    PRIMARY KEY(`id`));</pre>
<pre>-- To insert a new closure and get the coresponding ID:
INSERT INTO `closures` (`exec`) VALUES ('@exec')</pre>
<pre>-- To extract a closure's data
SELECT `exec` FROM `closures` WHERE `id` = @id</pre>
<pre>-- To drop an unused closure
DELETE FROM `closures` WHERE `id` = @id</pre>
</blockquote>
Creating a closure involves four arguments: the list of source files to include to be able to run the closure (this will be prepended to the PHP code stored in the database), the formal parameter, the source code to be executed, and the list of arguments stored in the closure (this will be serialized by value, so no references are allowed here). Again, in a pseudocode fashion:
<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">function</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> create_persistent_closure</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$include</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$args</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$code</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$data</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span> <span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">{</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">foreach</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$include</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">as</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$file</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$src</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">.</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">"require_once('</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">$file</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">');"</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">foreach</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">array_values</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$args</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">as</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$arg</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$src</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">.</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">sprintf</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'$%s = function_get_arg(%d);'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$arg</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span>  
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">foreach</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$data</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">as</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$var</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$value</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$src</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">.</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">sprintf</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'$%s = unserialize(\'%s\</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">');'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$var</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">                    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">addcslashes</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">serialize</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$value</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">\\</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">\'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">return</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> add_to_database</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$src . $code</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">}</span> 

<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">function</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> get_persistent_closure</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span> <span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">{</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">return</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">create_function</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">''</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> get_from_database</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">}</span></pre>
</blockquote>
The return value of <span style="font-family: courier new,courier; color: #999999;">get_persistent_closure</span> is a callable function which will execute the stored code. Note that due to the limitations of serialization in PHP, the list of arguments stored in the closure will generally be a set of identifiers and indices used to retrieve the actual objects to be manipulated (from factories and singletons). For instance:
<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #808080;">// When registering an observer (first HTTP request)</span>   
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$closure</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> create_persistent_closure</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">array</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'core/models/user.php'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'$product_id'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'UserFactory::Get($user_id)-&gt;SendProductNotification($product_id);'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">array</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'user_id'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$user_id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 

<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">Store</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">::Get</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">($store_id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">AddObserver</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$closure</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 

<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #808080;">// When notifying observers (second HTTP request)</span>  
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">foreach</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">closures</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">as</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">) {</span>  
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$func</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> get_persistent_closure</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$func</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$product_id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    drop_from_database(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$func);</span> <span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">
}</span> 

<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">closures</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> = </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">array</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">();</span></pre>
</blockquote>
<h2>Using code generation</h2>
The above example, while full of good ideas, is insufficient. The main reason is, of course, safety: anyone with write access to the appropriate database table can cause arbitrary code to be executed, and this is easy if an SQL injection vulnerability exists. By contrast, storing the source code as files on disk is safer: write access to the disk already bears the risk of executing arbitrary code simply by uploading it. By restricting PHP-implemented uploads to a specific directory that is kept separate from the persistent closure cache, one can ensure the safety of the code.

By using source files serialized to disk, however, one runs the risk of multiple access to the same file. Therefore, it is advised that the file is manipulated using locking primitives to avoid those issues.

I will not provide the complete implementation here. However, the basic idea behind this implementation is to provide a directory containing the persistent closures. The closures are saved to relative paths within that directory, of the form <span style="font-family: courier new,courier; color: #999999;">'module/params/reason'</span>, for instance <span style="font-family: courier new,courier; color: #999999;">'store/1013/onProductRestock'</span>. The closures are stored inside the event handler that will be using them, thereby improving performance when several closures are used by the same handler (thus avoiding multiple loads).

The typical usage would be:
<blockquote>
<pre style="background: #ffffff none repeat scroll 0% 50%; color: #000000;"><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #808080;">// When registering an observer (first HTTP request)   </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">Store</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">::</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">Get</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$store_id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> GetHandler</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> Register</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">array</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'core/models/user.php'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'$product_id'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'UserFactory::Get($user_id)-&gt;SendProductNotification($product_id);'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">,</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">  </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">    </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">array</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">'user_id'</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$user_id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span> 

<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #808080;">// When notifying observers (second HTTP request)  </span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$handler</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">=</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> -&gt; GetHandler();</span>
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$handler</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> Call</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$product_id</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">$handler</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> Clear</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span> 
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">
</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #808080;">// Inside the GetHandler function</span>
<span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">return new</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> EventHandler</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">(</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">"store/"</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;"> . $</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000084; font-weight: bold;">this</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">-&gt;</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">store_id . </span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #0000ff;">"/onProductRestock"</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">)</span><span style="background: #ffffe8 none repeat scroll 0% 50%; color: #000000;">;</span></pre>
</blockquote>