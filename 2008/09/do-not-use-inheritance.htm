@title Do Not Use Inheritance
@date 2008-09-11
@tags imperative cms
@draft

(... to extend existing functionality)
<h2>Inheritance does not support inheritance</h2>
Inheritance serves two distinct purposes:
<ul>
	<li>Reusing and extending existing functionality (represented by the parent class).</li>
	<li>Creating a subtype relationship, allowing instances of the new class to be used wherever instances of the parent could.</li>
</ul>
With the notable exception of protected members, the first property can be equally obtained with composition, and the ultimate objective of protected members usually implies that inheritance will be used primarily to specify new behavior for the existing interface of the parent class, instead of being used to extend the functionality of the parent class.

The second property can be used anywhere an instance of the parent class exists, by replacing that instance with one from the new class. The only exception to this is... <em>inheritance</em>!

That is, if the classes <span style="font-family: courier new,courier; color: #999999;">FirstDerived </span>and <span style="font-family: courier new,courier; color: #999999;">SecondDerived </span>both inherit from the class <span style="font-family: courier new,courier; color: #999999;">Base</span>, the parent instance of every <span style="font-family: courier new,courier; color: #999999;">FirstDerived</span> instance will always be an instance of <span style="font-family: courier new,courier; color: #999999;">Base</span>, and cannot be set to be an instance of <span style="font-family: courier new,courier; color: #999999;">SecondDerived</span>. By contrast, with composition, it's possible to use an object provided as a constructor argument, which may be an instance of any class that inherits from <span style="font-family: courier new,courier; color: #999999;">Base</span>.
<h2>When does this matter?</h2>
In a well-written program, never. After all, if a class follows a typical <em>is-a</em> constraint for its inheritance graph, then nobody will ever want to use a <span style="font-family: courier new,courier; color: #999999;">Dog </span>as the parent instance of a <span style="font-family: courier new,courier; color: #999999;">Cat </span>(even though both inherit from <span style="font-family: courier new,courier; color: #999999;">Animal</span>).

When it matters, however, is the situation where the <em>is-a</em> constraint is not respected. A recent example was the <a href="http://digitaluscms.com/">Digitalus CMS</a>, written in PHP using the Object system (though I would not go as far as saying that its design is Object-Oriented). That CMS had a base <span style="font-family: courier new,courier; color: #999999;">Content</span> class representing the underlying database representation of content, which was effectively a monostate, and inherited two classes, <span style="font-family: courier new,courier; color: #999999;">Page </span>and <span style="font-family: courier new,courier; color: #999999;">ContentPage</span>, from that base class. I will ignore for a short while the naming issues there (calling <span style="font-family: courier new,courier; color: #999999;">Page </span>something which inherits from what is ultimately a page manager, as well as using only two words for three classes) and dive into the real problem : while <span style="font-family: courier new,courier; color: #999999;">Page </span>is-a <span style="font-family: courier new,courier; color: #999999;">Content </span>(the former being an administration-only manager allowing modification, while the latter is a guest-only manager), <span style="font-family: courier new,courier; color: #999999;">ContentPage</span> is a page of content, which is precisely the kind of thing that <span style="font-family: courier new,courier; color: #999999;">Content </span>manages. And therefore, even though a page-of-content is not a content-manager (and is never used as such), page-of-content inherits from content-manager.

In fact, <span style="font-family: courier new,courier; color: #999999;">ContentPage </span>goes as far as smashing around the <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a> with a chainsaw and a sledgehammer, by actually removing from its interface most of the functions provided by its <span style="font-family: courier new,courier; color: #999999;">Content </span>parent. Why? To get a handful of functions from the parent available in the child.

My objective was to extend the behavior of <span style="font-family: courier new,courier; color: #999999;">Content </span>by creating a new class, <span style="font-family: courier new,courier; color: #999999;">LocalContent</span>, that would allow different websites to exist together inside the same Digitalus CMS instance (sharing the same administration), and thus needed to perform site-page associations as part of that model.

However, to extend the behavior of <span style="font-family: courier new,courier; color: #999999;">Content</span>, one cannot use inheritance : pages of content are only compatible with the original content manager ! Since the extended content manager cannot be used in all situations, one cannot simply change the base class of <span style="font-family: courier new,courier; color: #999999;">ContentPage </span>(this would break code where a <span style="font-family: courier new,courier; color: #999999;">Content </span>is necessary), which implies either code duplication or heavy refactoring of third party code (and the implicit compatibility loss with future updates of the tool). By contrast, had the original author used composition, the simple solution would have been to create an additional constructor (for instance, through default parameters in the original constructor) allowing the user to specify what instance of <span style="font-family: courier new,courier; color: #999999;">Content </span>or one of its subclasses the content page should use.

The chosen solution was to <strong>trash </strong>the <span style="font-family: courier new,courier; color: #999999;">ContentPage </span>implementation, and write my own (functionally equivalent) version of it using <span style="font-family: courier new,courier; color: #999999;">LocalContent </span>through composition. So much for extensibility.
<h2>Conclusion</h2>
Using inheritance to incorporate the behaviour of a class, when there is no clear is-a relationship, prevents you from extending the base class and incorporating those extensions in your own (something which may indeed prove useful, since no is-a relationship would preclude the existence of such extensions). By contrast, composition adds only minimal overhead (in terms of code to be written) and keeps the benefit of inheritance-based polymorphism for the class you're writing.