@title Software Inbreeding
@date 2010-06-21
@tags imperative architecture documentation strategy start-up
@draft

You've seen one of these painful, horrible business applications, uglier than hell and with no thought put into consistency or usability. No sane person would use them, but they are still used because that's what the company paid for and that's what the employees are going to use.

The root cause of all this suffering? Think about it : who is going to write a piece of accounting software?

<strong>Choice A</strong> : the competent <strong>former accountant</strong> who happens to know something about programming. But he's not an expert, so he uses some PHP4 he stole off the web instead of leveraging open source tools that are too hard for him to change, he writes &lt;marquee&gt; everywhere because he never heard of <a href="http://projects.zoulcreations.com/jquery/growl/" target="_blank">growl</a>, he makes weird mistakes related to unicode (which he believes is a Nazi encryption scheme from 1944) and he steals assorted icons from the 1990 Macintosh world because <a href="http://famfamfam.com/lab/icons/silk/" target="_blank">FamFamFam's silk</a> is too esoteric for him to know about.

<strong>Choice B</strong> : the competent <strong>programmer</strong> who happens to know something about accounting. [Insert here striking examples about how incompetent programmers can be when dealing with accounting :) ] And he might get bored before the end, because accounting is boring to engineering types (and that would be assuming he even <em>knew</em> there was a need for an accounting application in the first place).

With Choice B, you get a symphony of Ajax-CSS3-HTML5 beauty and pixel-tuned usability, but you can't use <a href="http://blog.asmartbear.com/cash-or-accrual-basis-accounting.html" target="_blank">accrual-based accounting</a> because the programmer never heard of it, and you just can't use an accounting program that doesn't handle accrual-based accounting if you're serious about it. <strong>So, you use Choice A, which is an ugly-as-hell, retina-maiming, CTS-inducing threat to humanity that handles accrual-based accounting</strong>.

People try to solve problems they are familiar with. It does not surprise me in the least when Dharmesh Shah notes <a href="http://onstartups.com/tabid/3339/bid/11978/The-10-Most-Tempting-Software-Startup-Categories.aspx" target="_blank">ten recurring themes for young software start-ups</a> to work on. To wit:
<blockquote>1. Project Management / Time Tracking / Bug Tracking
2. Community / Discussion Forums
3. Personalized News Aggregation/Filtering
4. Content Management (website, blog)
5. Social Voting and Reviews
6. Music/Events Location Application
7. Dating and Match-Making
8. Personal Information Management
9. Social Network For ______
10. Photo/video/bookmark/whatever sharing</blockquote>
If you're a programming genius, not only do you have a good idea of what features these applications should have, but you would actually be standing in line to use them as soon as they are available.

On the other hand, you don't wake up every morning to do a little dance, thinking «<em>Woo, this order-printing application will kick so much ass!</em>» And even if you managed to get excited about the project as a technical challenge(<em>Woo, this next-gen F#-and-AJAX application, which happens to print orders, will kick them butts all right</em>!), the tedium of identifying hundreds of fields and entities and relationships and business rules, and typing them in, can't really be considered a technical challenge. And F#-and-AJAX won't help if your ER diagram is off, so you have to ask the accountant, who will promptly bore you to death with an in-depth explanation of <a href="http://www.internationaltaxreview.com/?Page=10&amp;PUBID=35&amp;ISS=25377&amp;SID=719836&amp;TYPE=20" target="_blank">international VAT deduction rules</a>.

And that's a shame, because the non-programming <em>hoi polloi</em> are stuck with software from the 1980s that can't be replaced until all the features are replicated by the new solution.

Dealing with software older than yourself is always a traumatizing experience. Think of the children.

<small>EDIT: Seth Godin published a post around <a href="http://sethgodin.typepad.com/seths_blog/2010/06/a-sad-truth-about-most-traditional-b2b-marketing.html" target="_blank">being passionate about tax accounting</a> at the same time I published this post... my sneaky mind control schemes for owning the internet must be working.</small>