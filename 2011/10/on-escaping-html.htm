@title On Escaping HTML
@date 2011-10-11
@tags dynamic php bugs html
@draft

<img class="aligncenter size-full wp-image-2573" title="dome" src="http://www.nicollet.net/wp-content/uploads/2011/10/dome.png" alt="" width="675" height="100" />

A common issue with web software is cross-site scripting attacks — the ability for a third party to inject HTML elements into pages displayed to other users, using scripts contained in those elements to capture user cookies or perform operations on their behalf.

The technical challenge in solving this is that whenever data is being output through a HTML page, it should be escaped — any special HTML characters should be turned into their non-special versions in order to be displayed verbatim. This is an ongoing effort: each new page and each new variable on a page involve the same amount of effort to be done.

Of course, the solution would be to decide that <strong>escaping string output should be a default behavior that must be explicitly overriden</strong>. This does create issues where HTML is escaped when it should not have been, but:
<ul>
	<li>These issues cannot be used to perform attacks.</li>
	<li>They are usually easier to reproduce and consequently to solve.</li>
	<li>HTML <em>usually </em>comes from template files, which can be handled with a different default.</li>
</ul>
Indeed, I can guarantee that my software has zero vulnerabilities related to escaped HTML, because I have built into the type system the fact that HTML always comes from templates, and the method that injects variables into templates escapes them. If I try to use a string as if it were HTML, I get a compiler error.

Even without a type system, one can guarantee that the system would rather break at runtime than allow an injection, using the exact same design, with incompatible data structures for templates and strings that blow up when a string is used as a template:
<pre style="color: #000020; padding-left: 30px;"><code><span style="color: #200080; font-weight: bold;">class</span><span style="color: #000000;"> FilledTemplate </span><span style="color: #406080;">{</span>
<span style="color: #000000;">  </span><span style="color: #200080; font-weight: bold;">function</span><span style="color: #000000;"> </span><span style="color: #400000;">__construct</span><span style="color: #308080;">(</span><span style="color: #007d45;">$html</span><span style="color: #308080;">)</span><span style="color: #000000;"> </span><span style="color: #406080;">{</span>
<span style="color: #000000;">    </span><span style="color: #007d45;">$</span><span style="color: #200080; font-weight: bold;">this</span><span style="color: #308080;">-&gt;</span><span style="color: #007d45;">_html</span><span style="color: #000000;"> </span><span style="color: #308080;">=</span><span style="color: #000000;"> </span><span style="color: #007d45;">$html</span><span style="color: #406080;">;</span>
<span style="color: #000000;">  </span><span style="color: #406080;">}</span>
<span style="color: #000000;">  </span><span style="color: #200080; font-weight: bold;">function</span><span style="color: #000000;"> html</span><span style="color: #308080;">(</span><span style="color: #308080;">)</span><span style="color: #000000;"> </span><span style="color: #406080;">{</span>
<span style="color: #000000;">    </span><span style="color: #200080; font-weight: bold;">return</span><span style="color: #000000;"> </span><span style="color: #007d45;">$</span><span style="color: #200080; font-weight: bold;">this</span><span style="color: #308080;">-&gt;</span><span style="color: #007d45;">_html</span><span style="color: #406080;">;</span>
<span style="color: #000000;">  </span><span style="color: #406080;">}</span>
<span style="color: #406080;">}</span>

<span style="color: #200080; font-weight: bold;">class</span><span style="color: #000000;"> Template </span><span style="color: #406080;">{</span>
<span style="color: #000000;">  </span><span style="color: #200080; font-weight: bold;">function</span><span style="color: #000000;"> </span><span style="color: #400000;">__construct</span><span style="color: #308080;">(</span><span style="color: #007d45;">$file</span><span style="color: #308080;">)</span><span style="color: #000000;"> </span><span style="color: #406080;">{</span>
<span style="color: #000000;">    </span><span style="color: #007d45;">$</span><span style="color: #200080; font-weight: bold;">this</span><span style="color: #308080;">-&gt;</span><span style="color: #007d45;">_template</span><span style="color: #000000;"> </span><span style="color: #308080;">=</span><span style="color: #000000;"> </span><span style="color: #400000;">file_get_contents</span><span style="color: #308080;">(</span><span style="color: #007d45;">$file</span><span style="color: #308080;">)</span><span style="color: #406080;">;</span>
<span style="color: #000000;">  </span><span style="color: #406080;">}</span>
<span style="color: #000000;">  </span><span style="color: #200080; font-weight: bold;">function</span><span style="color: #000000;"> fill</span><span style="color: #308080;">(</span><span style="color: #007d45;">$values</span><span style="color: #308080;">)</span><span style="color: #000000;"> </span><span style="color: #406080;">{</span>
<span style="color: #000000;">    </span><span style="color: #007d45;">$replace</span><span style="color: #000000;"> </span><span style="color: #308080;">=</span><span style="color: #000000;"> </span><span style="color: #200080; font-weight: bold;">array</span><span style="color: #308080;">(</span><span style="color: #308080;">)</span><span style="color: #406080;">;</span>
<span style="color: #000000;">    </span><span style="color: #007d45;">$with</span><span style="color: #000000;">    </span><span style="color: #308080;">=</span><span style="color: #000000;"> </span><span style="color: #200080; font-weight: bold;">array</span><span style="color: #308080;">(</span><span style="color: #308080;">)</span><span style="color: #406080;">;</span>
<span style="color: #000000;">    </span><span style="color: #200080; font-weight: bold;">foreach</span><span style="color: #000000;"> </span><span style="color: #308080;">(</span><span style="color: #007d45;">$values</span><span style="color: #000000;"> </span><span style="color: #200080; font-weight: bold;">as</span><span style="color: #000000;"> </span><span style="color: #007d45;">$key</span><span style="color: #000000;"> </span><span style="color: #308080;">=</span><span style="color: #308080;">&gt;</span><span style="color: #000000;"> </span><span style="color: #007d45;">$value</span><span style="color: #308080;">)</span><span style="color: #000000;"> </span><span style="color: #406080;">{</span>
<span style="color: #000000;">      </span><span style="color: #007d45;">$replace</span><span style="color: #308080;">[</span><span style="color: #308080;">]</span><span style="color: #000000;"> </span><span style="color: #308080;">=</span><span style="color: #000000;"> </span><span style="color: #1060b6;">'{'</span><span style="color: #308080;">.</span><span style="color: #007d45;">$key</span><span style="color: #308080;">.</span><span style="color: #1060b6;">'}'</span><span style="color: #406080;">;</span>
<span style="color: #000000;">      </span><span style="color: #200080; font-weight: bold;">if</span><span style="color: #000000;"> </span><span style="color: #308080;">(</span><span style="color: #007d45;">$value</span><span style="color: #000000;"> </span><span style="color: #200080; font-weight: bold;">instanceof</span><span style="color: #000000;"> FilledTemplate</span><span style="color: #308080;">)</span><span style="color: #000000;"> </span>
<span style="color: #000000;">        </span><span style="color: #007d45;">$with</span><span style="color: #308080;">[</span><span style="color: #308080;">]</span><span style="color: #000000;"> </span><span style="color: #308080;">=</span><span style="color: #000000;"> </span><span style="color: #007d45;">$value</span><span style="color: #308080;">-</span><span style="color: #308080;">&gt;</span><span style="color: #000000;">html</span><span style="color: #308080;">(</span><span style="color: #308080;">)</span><span style="color: #406080;">;</span>
<span style="color: #000000;">      </span><span style="color: #200080; font-weight: bold;">else</span><span style="color: #000000;"> </span>
<span style="color: #000000;">        </span><span style="color: #007d45;">$with</span><span style="color: #308080;">[</span><span style="color: #308080;">]</span><span style="color: #000000;"> </span><span style="color: #308080;">=</span><span style="color: #000000;"> </span><span style="color: #400000;">htmlspecialchars</span><span style="color: #308080;">(</span><span style="color: #007d45;">$value</span><span style="color: #308080;">)</span><span style="color: #406080;">;</span>
<span style="color: #000000;">    </span><span style="color: #406080;">}</span>
<span style="color: #000000;">    </span><span style="color: #200080; font-weight: bold;">return</span><span style="color: #000000;"> </span><span style="color: #200080; font-weight: bold;">new</span><span style="color: #000000;"> FilledTemplate</span><span style="color: #308080;">(</span>
<span style="color: #000000;">      </span><span style="color: #400000;">str_replace</span><span style="color: #308080;">(</span><span style="color: #007d45;">$replace</span><span style="color: #308080;">,</span><span style="color: #007d45;">$with</span><span style="color: #308080;">,</span><span style="color: #007d45;">$</span><span style="color: #200080; font-weight: bold;">this</span><span style="color: #308080;">-&gt;</span><span style="color: #007d45;">_template</span><span style="color: #308080;">)</span>
<span style="color: #000000;">    </span><span style="color: #308080;">)</span><span style="color: #406080;">;</span>
<span style="color: #000000;">  </span><span style="color: #406080;">}</span><span style="color: #000000;"> </span>
<span style="color: #406080;">}</span></code></pre>
Obviously, many languages and frameworks use non-escaped string output as the default behavior. This, in my opinion, is pure, broken insanity — I can certainly see that designing a safe way of constructing HTML is harder than just following the «HTML is strings, just use string functions» approach and telling the programmer to «always escape your variables, kid» but I still find it quite irresponsible for self-proclaimed Web Languages to rely on such a primitive and dangerous paradigm. The stupid kind of irresponsible. Yes, PHP, I'm looking at you.

<small>Article Image © Freedom II Andres — <a href="http://www.flickr.com/photos/freedomiiphotography/6203083791/">Flickr</a></small>