@title Blame The Machine
@date 2012-02-28
@tags psychology strategy people start-up design runorg
@draft

Ten minutes ago, I was using one of those automatic checkout machines in a nearby supermarket. For those of you who wonder how I could be back home and typing a blog article within ten minutes of leaving a supermarket, remember that us <em>Parisiens</em> have supermarkets within walking distance of our downtown homes. But I digress. An interesting thing happened while I was checking out my purchases : a woman using the checkout machine next to mine had trouble scanning the barcode on a piece of broccoli, because the laser scanner was confused by its odd shape.

She called a store employee for help, explained the problem and <em>apologized for not being able to use the machine correctly</em>.

My first thought was « Why apologize ? This is clearly a <em>technical </em>problem, the machines should be able to handle broccoli correctly ! Blame the machines or the engineers who invented them ! »

Then, one of the other voices in my head whispered to me « Oh look, you're thinking like a product designer ! » and that voice was indeed quite right : I had spent the day working on some product design issues for my startup, and I was deep in the « Never blame users. Always blame the machine. » mindset that comes with it.

Had I spent the day writing code, I would have reacted exactly like that woman had — well, perhaps instead of calling for help I would have tried to debug the issue myself, but I would have still felt deserving of some kind of karmic blame for not being able to scan a piece of broccoli. <em>How much of an idiot do you have to be to fail to scan a piece of broccoli ?</em>

The first rule of programming is that <em>The Machine Is Always Right</em>. If something wrong happens, you messed up. You made a typo, left in a logic bug, failed to take an edge case into account, or had any other kind of brain fart. The chances of cosmic rays corrupting your RAM or compiler bugs mangling your algorithms are exceedingly slim. <strong>The reflexive reaction to any unexpected program behavior is to ask yourself « Where did I go wrong this time ? »</strong>

When improving a software product, the opposite mindset is necessary : if the program surprises the user, then the program is wrong. The chances of a complete idiot expecing your accounting package to play music are exceedingly slim.

So, to design software you need to be in blame-the-machine mode, and to develop software you need to be in blame-the-human mode. If you're both the designer and the developer, you had better be good at context-switching those two modes.

I patted myself on the back for my awesome context-switching abilities. I swear, I have a brain lobe entirely devoted to patting myself on the back.

Then I looked back on all the team meetings I had at RunOrg and examined the evidence in light of this blame-assignment mode, with alarming conclusions : it turns out that the context switching speed is not that good, and the speed depends on the direction. All you need to do to get me from blame-the-machine to blame-the-human is mention an interesting technical problem and hint that a solution might be needed, maybe, someday. Then I will put on my developer hat, reach for the caffeine and start thinking of possible solutions.

However, my non-technical co-founders are permanently in blame-the-program mode. If I am in blame-the-human mode and they suggest a program change, my thought process is as follows :
<ul>
	<li>FOOLISH MORTALS, ARE YOU SAYING MY WORK IS CRAP ?</li>
	<li>Wait. Stay calm. I'm not my work. I should take criticism like an adult.</li>
	<li>Ok, I understand what you expect, but that's not how it works.</li>
	<li>Wait. They know that's not how it works. What do they mean, then ?</li>
	<li>Oh, you mean users expect that to happen ? They're wrong.</li>
	<li>Wait. Customers are always right.</li>
</ul>
... and then I snap back to blame-the-program mode and all is well. Depending on how diplomatic I am feeling at the moment, one or more of the above steps may be played out silently in my head instead of being spoken out loud to my co-founders.

Does anyone else get these context-switches wrong, too ?